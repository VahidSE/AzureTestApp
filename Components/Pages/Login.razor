@page "/"
@inject AuthService Auth
@inject NavigationManager Nav
@rendermode InteractiveServer
@inject HttpClientService clientService
@inject ProtectedSessionStorage Session

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 400px;">
        <div class="text-center mb-4">
            <i class="bi bi-power display-4 text-primary"></i>
            <h4 class="fw-bold mt-2">Welcome</h4>
            <p class="text-muted">Register or Login to continue</p>
        </div>

        <div class="form-check form-switch mb-3">
            <input class="form-check-input" type="checkbox" role="switch" @bind="isNew" id="isNewSwitch" />
            <label class="form-check-label" for="isNewSwitch">
                @if (isNew)
                {
                    <span>You're registering 🎉</span>
                }
                else
                {
                    <span>Returning user 👋</span>
                }
            </label>
        </div>

        <div class="mb-3">
            <input @bind="username" class="form-control" placeholder="Username" />
        </div>

        <div class="mb-3">
            <input @bind="password" type="password" class="form-control" placeholder="Password" />
        </div>

        @if (isNew)
        {
            <button class="btn btn-success w-100" @onclick="HandleRegister">
                <i class="bi bi-person-plus me-2"></i> Register
            </button>
        }
        else
        {
            <button class="btn btn-primary w-100" @onclick="HandleLogin">
                <i class="bi bi-box-arrow-in-right me-2"></i> Login
            </button>
        }
    </div>
</div>



@code {
    string username = "", password = "";
    bool isNew = false;

    async void HandleLogin()
    {
        HttpClientService.LoginResponse token = await clientService.GetToken(username, password);
        if (token != null && !String.IsNullOrEmpty(token.Token))
        {
            await Session.SetAsync("authToken", token.Token); // store token in session
            await Session.SetAsync("authUsername", token.Username);
            Nav.NavigateTo("/CustomTx");
        }
        else
        {
            Nav.NavigateTo("/Error");
        }
    }

    void HandleRegister()
    {
        // if (await Auth.LoginAsync(username, password))
            
        // else
        //     Console.WriteLine("Login failed");
    }
}
